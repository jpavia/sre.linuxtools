#/bin/bash

#exit

E_ARGERROR=85
MINPARAMS=1

if [ $# -lt "$MINPARAMS" ] 
then 
   echo "!ERROR! Missing host parameter"
   echo "
Usage: `basename $0`  host 

`basename $0` - checks for busy DS and alerts NOC 

Example:
     lids104:~> `basename $0` sdc-p-lids03

Pre-requisites:
"
   exit $E_ARGERROR
fi

host=$1
shift

ecko "ping -c 1 $host" > /dev/null

if [  $? -ne 0 ]
then
        ecko "sleep 30"
        ecko "ping -c 1 $host" > /dev/null
        if [  $? -ne 0 ] 
        then
                echo "Exiting:  $host cannot be pinged."
                echo "Alerting SRE"
                string="CRITICAL $host not responding to ping from busyDS running on adm104"
                pdsh -w pdc-smtp2 "echo $string | mailx -s CRITICAL_HOST_UNREACHABLE_$host EIS.Shared.SiteReliability.SREs@ebsco.com" #jpavia@epnet.com j.bailey@ebsco.com
                ecko "busyDS $host &"
                exit 99
        fi
fi

# Assign Attempt value

unset attempts
unset prevdb

attempts=$1
prevdb=$2

# Issue ps command to find top CPU process

echo "Executing: ssh $host ps -ef --sort c | tail -n 1"

# Make sure host can be ssh'd to

ssh $host pwd
 
if [ $? != 0 ]
then
        echo "Could not ssh to $host, exiting."
        string="CRITICAL $host not responding to ssh from busyDS running on adm104"
        ecko "pdsh -w pdc-smtp2.epnet.com  "echo $string | mailx -s CRITICAL_HOST_UNREACHABLE_$host EIS.Shared.SiteReliability.SREs@ebsco.com"" #jpavia@epnet.com j.bailey@ebsco.com
        ecko "sleep 30"
        ecko "busyDS $host &"
        exit 91

fi



set `ssh $host ps -ef --sort c | tail -n 1`

if [ $? != 0 ]
then
        echo "Command could not be determined from string, $job , exiting."
        ecko "sleep 30"
        ecko "busyDS $host &"
        exit 91

fi 

job=$*
 
for arg in $*
do
        if [  -z "${arg##-f*}" ]
        then
                db=${arg#-f}
#               echo "`date`: Busiest database on $host is $db using "$cpu"% CPU and PID $pid"
        elif [ -z "${arg##--family*}" ]
        then
                db=${arg#--family=}
        fi
        if [  -z "${arg##DDS7*}" ]
        then
                cmd=${arg#DDS7}
#               echo "`date`: Busiest database on $host is $db using "$cpu"% CPU and PID $pid" 
        fi
done 

# Read in ps command output

user=$1
shift
pid=$1
shift
ppid=$1
shift
cpu=$1
shift
#date=$1
#shift
#var6=$1
#shift
#var7=$1
#shift
#var8=$1
#shift
#var9=$1
#shift
#var10=$1
#shift
#cmd=$1
#shift


# Read in command line arguments

#cmd1=$1
#shift
#cmd2=$1
#shift
#cmd3=$1
#shift
#cmd4=$1
#shift
#cmd5=$1
#shift
#cmd6=$1
#ift
#cmd7=$1
#shift
#cmd8=$1
#shift
#cmd9=$1
#shift
#cmd10=$1

# Echo values to user for debugging

echo "
user=$user
pid=$pid
ppid=$ppid
cpu=$cpu
"
#date=$date
#var6=$var6
#var7=$var7
#var8=$var8
#var9=$var9
command=$cmd
echo "command=$command"
#commandlinearg1=$cmd1
#commandlinearg2=$cmd2
##commandlinearg3=$cmd3
#commandlinearg4=$cmd4
#commandlinearg5=$cmd5
#commandlinearg6=$cmd6
#commandlinearg7=$cmd7
#commandlinearg8=$cmd8
#commandlinearg9=$cmd9
#commandlinearg10=$cmd10
#
#

# Exit if cmd does not contain epds2 or epsed

if [ ! -z "${job##*epds2*}" ]
then
        echo "Command could not be determined from string, $job , exiting."
        ecko "sleep 30"
        ecko "busyDS $host &"
        exit 0
fi

if [ ! -z "${cmd##*epds2}" ] 
then
        if [ !  -z "${cmd##*DDS7*}" ]
        then
                echo "Exiting-  top process is $cmd,  not epds2"
                ecko "sleep 30"
                ecko "busyDS $host &"
                exit 0
        fi
        echo "Exiting-  top process is $cmd,  not epds2"
        ecko "sleep 30"
        ecko "busyDS $host &"
        exit 0

fi

echo "`date`: Busiest database on $host is $db using "$cpu"% CPU and PID $pid" 
 
# Exit if db does not equal previous db, if previous db provided.

if [ -z $prevdb ]
then
        if [[ $prevdb == $db ]]
        then
                echo "Exiting, busiest DS has changed on $host , was $prevdb and is now $db"
                ecko "sleep 30"
                ecko "busyDS $host &" 
                exit 0
        fi
fi


# If CPU is > 98% , retest.

if [ $cpu -gt 98 ]
then
        sleep 30
        attempts=`expr $attempts + 1`
        echo "attempts=$attempts"
        if [[ "$attempts" -gt 20  ]]
        then
                echo "Alerting NOC"
                string="CRITICAL $db DS has been hung on $host for 10 minutes, using $cpu % CPU on PID $pid. Please start additional $db DSs in effected Data Center before killing the hung DS. NOTE: this version will NOT KILL  DS automatically"
                subj="_CRITICAL_HUNG_DS_$db"
                subj="$host$subj"
                #ecko "ssh dns1 echo $string | mail -s $subj jpavia@epnet.com pmahajan@epnet.com sbarry@epnet.com tarchibald@epnet.com nnadig@epnet.com afassio@epnet.com bmitchell@epnet.com sdumpala@epnet.com ccooper@ebsco.com cbarone@ebsco.com j.bailey@ebsco.com " #EIS.Tech.SREs@ebsco.com " #NagiosAlerts@ebsco.com EIS.Tech.SREs@ebsco.com  jpavia@epnet.com apavia@ebsco.com
                ecko "pdsh pdc-smtp2 "echo $string | mailx -s $subj EIS.Shared.SiteReliability.SREs@ebsco.com""

# Kill Hung DS - next two lines often commented out to avoid false positives and looping conditions, but sometimes useful for extremely long duration anomalies

                #ecko "ssh $host kill -9 $pid"
                #sleep 100
                attempts=0
                ecko "busyDS $host &"
                exit 100
        fi
        ecko "busyDS $host $attempts $db" 
else
        # Exit if CPU less than 100
        echo "Exiting, CPU less than 98%"
        ecko "sleep 30" 
        ecko "busyDS $host &"
        exit 0
fi
exit 0
